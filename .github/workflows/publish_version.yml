name: Build, Test, Coverage and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-test-coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run unit tests with coverage
        run: |
          dotnet test tests/EmployeeLib.Tests/EmployeeLib.Tests.csproj \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Generate coverage report
        run: |
          echo "Searching for coverage files..."
          find ./TestResults -name "*.xml" -type f
          
          COVERAGE_FILES=$(find ./TestResults -name "coverage.cobertura.xml" -type f)
          
          if [ -z "$COVERAGE_FILES" ]; then
            echo "❌ No coverage files found!"
            exit 1
          fi
          
          echo "✅ Found coverage files, generating report..."
          reportgenerator \
            -reports:./TestResults/**/coverage.cobertura.xml \
            -targetdir:./coverage-report \
            -reporttypes:"Html;Badges;HtmlSummary"
          
          echo "📊 Coverage report generated successfully"

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./coverage-report
          retention-days: 30

      - name: Deploy coverage to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./coverage-report
          destination_dir: coverage

      - name: Get coverage percentage
        if: github.ref == 'refs/heads/main'
        id: coverage
        run: |
          if [ -f "./coverage-report/index.html" ]; then
            COVERAGE=$(grep -oP 'Line coverage: \K[0-9.]+' ./coverage-report/index.html | head -1 || echo "N/A")
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "📊 Coverage: $COVERAGE%"
          else
            echo "coverage=N/A" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        if: github.ref == 'refs/heads/main'
        run: |
          VERSION=$(date +%Y.%m.%d-%H%M%S)
          COVERAGE="${{ steps.coverage.outputs.coverage }}"
          
          echo "📦 Creating release v$VERSION"
          
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes "## 🚀 Automated Release

          ### ✅ Build Status
          - **Build**: Successful
          - **Tests**: All passed
          - **Coverage**: ${COVERAGE}%

          ### 📊 Reports
          - 📚 [Documentation](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)
          - 📊 [Coverage Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/coverage/)

          ### 📅 Release Information
          - **Date**: $(date +'%Y-%m-%d %H:%M:%S UTC')
          - **Commit**: ${{ github.sha }}
          - **Author**: ${{ github.actor }}
          
          ---
          *This release was automatically generated by GitHub Actions*" \
            --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}